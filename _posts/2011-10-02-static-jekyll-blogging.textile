---
title: Blogging with Jekyll
layout: post
---

h1. {{ page.title }}

p(meta). Blogging the static way with Jekyll

While looking for a platform for my personal website, I considered WordPress for a little while, it has a few advantages over other platforms out there: it's popular, and there are a ton of plugins that exist for it. Unfortunately, these advantages also play directly into its main disadvantages. WordPress is a huge target for those Internet ne're-do-wells, which means if you aren't updating your blog to the newest version quick enough, you are probably going to get exploited. And all those plugins, while some may be useful, they generally lead to a bloated, resource intensive monster that can bring a server to it's knees.

Enter "Jekyll":https://github.com/mojombo/jekyll, created by "Tom Preston-Werner":http://tom.preston-werner.com/ one of the co-founders of GitHub. Jekyll uses Ruby to run your blog posts through Textile and Liquid converters to make static html pages from basic templates and .textile markdown files. There are sever huge (IMHO) advantages to this type of system. First, your blog is stored on your local machine, which means you don't have to worry about some server somewhere having an issue and losing all of your data. The blog is also pushed to a Git repository, meaning you have data redundancy. Second, your blog consists of a collection of static html pages. No dynamic content means your blog is much more secure, with no dynamic content to manipulate, there isn't much for someone to attack. Third, your blog's content resides as simple flat files, no MySQL databases, another popular attack vector. Finally, and I think the most important, it's just plain cool.

Setting up Jekyll is fairly straight forward, I'm no computer/web genius, so I did find a few things hard to figure out, so I thought I'd like to give back to a bit of software that I enjoy. I wanted to write a post on how I set up and configured Jekyll to work with my VPS. I'm assuming that you have a private Git repository set up, that you understand how to work with Git, and that you have a functioning Apache server running. A great resource for setting up a Git server can be found "here":https://wiki.archlinux.org/index.php/Git on the Arch Linux Wiki, I also used "this article":https://wiki.archlinux.org/index.php/Apache from the Arch Linux Wiki to set up my web server, however, you won't need MySQL for my setup. Also, I run Arch Linux (if you couldn't tell yet) on my server, so these instructions are geared toward Arch Linux, however, you should be able to use them for other distributions as well, your mileage may vary. You can open up my "Jekyll Git repository":http://git.kyleberry.org/jekyll.git/tree in another tab, and see exactly what my blog looks like in it's raw form, it may help to access the blobs there.

**Jekyll Setup**

The first step is to install Ruby with a simple:

@pacman -S ruby ruby-docs@

After we have Ruby installed, we need to update Ruby Gems:

@sudo gem update --system@

Then, install the Gems we'll be using, Jekyll, RedCloth and rdiscount.

@sudo gem install jekyll@
@sudo gem install RedCloth@
@sudo gem install rdiscount@

Okay, now that we have Ruby installed, and all the Ruby Gems that we'll need, it's time to configure Jekyll.

First, we want to create a bare Git repository on your server, and then clone that repository on your our machine. Jekyll looks for files to be in a certain location, we'll want to create the following directory structure in our Jekyll repository folder. You can also clone into my Git repository using @git clone git://git.kyleberry.org/jekyll.git@ and follow along there, or just copy my files and edit them to your hearts content, I promise, I don't care.

<pre><code>/path/to/repo/jekyll
├── _config.yml
├── css
│   ├── screen.css
│   └── syntax.css
├── index.html
├── _layouts
│   ├── default.html
│   └── post.html
└── _posts
    ├── 2011-09-27-track-karma-with-xmonad.textile
    └── 2011-10-02-static-jekyll-blogging.textile</code></pre>

This is a basic, no frills Jekyll setup, you can see the two posts that I've posted to my blog in the @./_posts@ folder, and the @./css@ folder which contains my style sheets. The @./_layouts@ folder is where our templates will go, the @index.html@ file is another template for our blogs index page, and the @_config.yml@ is the main Jekyll configuration file.

We should make our @_config.yml@ look something like this to begin:

<pre><code>source:         .
destination:    ./_site

markdown:       marku
pygments:       true

plugins:    ./_plugins

permalink: /:year/:i_month/:i_day/:title.html

rdiscount:
  extensions: []</code></pre>

The only thing that I've customized here would be the permalink structure, you can find a full explanation of how to set up your permalinks to your liking on the Jekyll Wiki "here":https://github.com/mojombo/jekyll/wiki/permalinks. I have also borrowed the @.css@ files (and a few other things) from "Tom Preston-Werner":https://github.com/mojombo/tpw. I encourage you to also check out "his blogs repo":https://github.com/mojombo/tpw.

My current directory structure looks a bit different, as I have added things like custom error pages, a static comment plugin, a @robots.txt@ file, and a @favicon.ico@. Here is what it looks like now:

<pre><code>/path/to/repo/jekyll/
├── comment_received.html
├── _comments
├── commentsubmit.php
├── _config.yml
├── css
│   ├── screen.css
│   └── syntax.css
├── error403.html
├── error404.html
├── error500.html
├── favicon.ico
├── images
│   ├── arch.png
│   ├── karmawidget.png
│   └── vim_created.png
├── index.html
├── _layouts
│   ├── default.html
│   └── post.html
├── _plugins
│   └── static_comments.rb
├── _posts
│   ├── 2011-09-27-track-karma-with-xmonad.textile
│   └── 2011-10-02-static-jekyll-blogging.textile
└── robots.txt</code></pre>

As you can see, I've also added an @./images@ directory to hold all the images I use for my blog, and there are a few other files in there for the static comment plugin.

Now, we should have a functioning Jekyll site set up on our local machine, while we can't push it to our server and expect a site to magically appear just yet, we can test it on our local machine. All we need to do is run the following command:

@jekyll /path/to/repo /path/to/site --server@

This will generate our Jekyll site in the directory @/path/to/site@ and start a webserver at @localhost:4000@. Just point your browser at @localhost:4000@ and if all has gone well, you'll see the front page of your site. I wrote a little bash script to make generating this test site a little easier, you can find it "here":http://git.kyleberry.org/scripts.git/blob/HEAD:/testsite.sh if you are interested.

Now, most people who want to add comments to their static Jekyll site, turn to "Disqus":http://disqus.com. Adding javascript to the bottom of my page, and hosting my comments somewhere I have no control over seemed in direct conflict of the entire spirit of Jekyll. Thankfully, "Matthew Palmer":http://hezmatt.org/~mpalmer/blog/2011/07/19/static-comments-in-jekyll.html came to my rescue. His "static comment":http://theshed.hezmatt.org/jekyll-static-comments/ plugin for Jekyll was exactly what I was looking for. It places a simple input box at the bottom of your posts, uses a @.php@ script to process the comments and send them off through email to you for moderation. Static comments, immune from spammers, since it runs all your comments through your email's spam filters, and no dirty javascript, plain old html.

Setting up the static comment plugin wasn't too hard, I ran into a few issues, but "Mr. Palmer":http://hezmatt.org/~mpalmer/blog/ was very helpful.

First we want to check out his the "Jekyll Static Comments":https://github.com/mpalmer/jekyll-static-comments Git repository, and clone into it with a @git clone git://github.com/mpalmer/jekyll-static-comments@.

Once we have cloned into the repo, we'll have the following files in the folder:

<pre><code>/home/k6b/jekyll-static-comments
├── comment_received.html
├── commentsubmit.php
├── comment_template.html
├── COPYING
├── README.md
└── static_comments.rb</code></pre>

Now that we have everything we need, we need to put everything in the right spot so Jekyll can find it all. We need to copy @static_comments.rb@ to our Jekyll repository directory and put it under the @./_plugins@ directory. Next we need to put @commentsubmit.php@ and @comment_received.html@ in the base directory of our Jekyll repository so that everything looks just like the directory tree I posted above.

Then we need to edit @commentsubmit.php@ and put our email address in so the plugin knows where to send our comments to. At the top of our @post.html@ template, we'll need to make sure that we have this little code snippet: <code>{ % assign post = page % }</code>, without the space between @{@ and @%@, and @%@ and @}@. Which will make sure that the plugin correctly assigns post ids to our comments.

We also will need to add the html code from @comment_template.html@ to the end of our @post.html@ template, then our comment form will be added to the end of every post. Finally, we'll want to modify the @comment_received.html@ to use our blogs css templates, I also added this little snippet of php, to redirect commenters back to the post they were reading after they see the "Comment Received" confirmation page:

<pre><code><?php
$ref = $_SERVER['HTTP_REFERER'];
header( 'refresh: 3; url='.$ref);
?></code></pre>

Now, we should have a functioning Jekyll blog, with a static comments plugin. To add comments to our posts, all we need to do is, copy and paste the comment into the @./_comments@ directory in your Jekyll repo, and regenerate the site. It doesn't matter what the comment files are named, the static comments plugin searches the entire directory and looks for the post id, and adds the comment to the corresponding post when we regenerate the site.

The last thing we need to do, is add a post-receive hook to our Jekyll repo to generate our site automatically in the @~http@ directory each time we run @git push@. We'll want to ssh into the remote server and @cd@ over to our repositories directory on the server. Under the @./hooks@ directory, there are several examples of hooks. We want to create a post-receive hook that will clone our repository into a temporary directory, and then generate our Jekyll site into the @~http@ directory. Paste the following code into a file called @post-receive@ in the @./hooks@ directory:

<pre><code>#! /bin/sh
echo Cloning temp git repo
git clone ~git/repositories/jekyll.git ~/tmp
cd ~/tmp
echo Building site.....
jekyll ~/tmp/ /srv/http/
cp .htaccess /srv/http/
cd ~
echo Removing temp git repo
rm -rf ~/tmp
echo Done!
exit</code></pre>

You'll notice that we are manually copying our @.htaccess@ file to the @~http@ directory. For some reason, Jekyll appears to ignore files that begin with a @.@, so I added a line to move the @.htaccess@ file over, which doesn't matter because Jekyll doesn't need to process the @.htaccess@ file anyway, and this will insure that our blog will always have the newest version of our @.htaccess@ file.

Now that everything is fully set up, we should have a Jekyll site that we can update by editing our local Git repository, and pushing changes to our remote Git repository. Now we can take advantage of having a full version control system for our blog, which makes it very easy to roll changes back if we've messed something up. And it makes it very easy to try out new setups, or change any aspect of our blog.

The Jekyll system also frees you up to use any text editor to blog that you feel comfortable in, Vim, Emacs (if that's your thing), or even notepad. The "RedCloth Textile":http://redcloth.org/ markup language isn't too hard to get the hang of, the "RedCloth website":http://redcloth.org/textile has a fairly extensive reference manual, although the "Textile Wikipedia":http://en.wikipedia.org/wiki/Textile_%28markup_language%29 page will probably be more than enough to get you started.

I hope that I've covered everything that you need to get started blogging with Jekyll, if I've missed something, please don't hesitate to "drop me a line":mailto:kyle@kyleberry.org and let me know about it.

Happy blogging!
